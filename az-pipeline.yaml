trigger: none

variables:
  dockerRegistryServiceConnection: 'react'
  imageRepository: 'reactfrontedcode'
  containerRegistry: 'reactfrontedcode.azurecr.io'
  tag: 'latest'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Deploy
  displayName: 'Deploy to VM'
  jobs:
  - job: DeployContainer
    displayName: 'Deploy to Azure VM'
    pool:
      vmImage: $(vmImageName)
    steps:
    # Get Docker Registry Credentials
    - task: Docker@2
      displayName: 'Docker Login'
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    # Extract registry credentials
    - task: Bash@3
      displayName: 'Get Docker Credentials'
      inputs:
        targetType: 'inline'
        script: |
          # Read Docker config and extract credentials
          DOCKER_AUTH=$(cat ~/.docker/config.json | grep -A 1 "$(containerRegistry)" | grep "auth" | cut -d'"' -f4)
          echo "##vso[task.setvariable variable=DOCKER_AUTH;]$DOCKER_AUTH"

    - task: SSH@0
      displayName: 'Deploy Container'
      inputs:
        sshEndpoint: 'vm-connection'
        runOptions: 'inline'
        inline: |
          # Decode and use the Docker credentials
          echo $DOCKER_AUTH | base64 -d > docker_creds
          USERNAME=$(cut -d: -f1 docker_creds)
          PASSWORD=$(cut -d: -f2 docker_creds)
          rm docker_creds

          # Login to ACR
          echo "$PASSWORD" | docker login $(containerRegistry) -u "$USERNAME" --password-stdin
          
          # Stop and remove existing container if it exists
          docker stop $(imageRepository) || true
          docker rm $(imageRepository) || true
          
          # Pull latest image
          docker pull $(containerRegistry)/$(imageRepository):$(tag)
          
          # Run new container
          docker run -d \
            --name $(imageRepository) \
            --restart unless-stopped \
            -p 80:3000 \
            $(containerRegistry)/$(imageRepository):$(tag)
          
          # Cleanup old images
          docker image prune -f
          
    - task: SSH@0
      displayName: 'Verify Deployment'
      inputs:
        sshEndpoint: 'vm-connection'
        runOptions: 'inline'
        inline: |
          # Check if the container is running
          if docker ps | grep -q $(imageRepository); then
            echo "Container deployed successfully!"
          else
            echo "Container deployment failed!"
            exit 1
          fi
